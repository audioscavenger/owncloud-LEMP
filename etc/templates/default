## https://doc.owncloud.com/server/administration_manual/installation/nginx_configuration.html
## The configuration assumes that ownCloud is installed in /var/www/owncloud and is accessed via http(s)://cloud.example.com.

upstream php-handler {
  server unix:/var/run/php/php7.2-fpm.sock;
}

server {
  listen {{.Env.NGINX_LISTEN}};

  index index.php index.html index.htm index.nginx-debian.html;

  server_name {{.Env.NGINX_SERVER_NAME}};

  root {{.Env.NGINX_ROOT}};

  ## For Lets Encrypt, this needs to be served via HTTP
  ## You can specify a different root for where the challenge file is placed
  location /.well-known/acme-challenge/ {
    root {{.Env.NGINX_ROOT_ACME_CHALLENGE}};
  }

  ## Add headers to serve security related headers
  ## Before enabling Strict-Transport-Security headers please read into this topic first.
  #add_header Strict-Transport-Security "max-age=15552000; includeSubDomains";
  add_header X-Content-Type-Options nosniff;
  add_header X-Frame-Options "SAMEORIGIN";
  add_header X-XSS-Protection "1; mode=block";
  add_header X-Robots-Tag none;
  add_header X-Download-Options noopen;
  add_header X-Permitted-Cross-Domain-Policies none;
  ## https://doc.owncloud.com/server/10.0/admin_manual/configuration/files/big_file_upload_configuration.html
  add_header X-Accel-Buffering no;


  ## deny access to .htaccess files, if Apache's document root
  ## concurs with nginx's one
  location ~ /\.ht {
    deny all;
  }
  
  location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
  }

  ## The following 2 rules are only needed for the user_webfinger app.
  ## Uncomment it if you're planning to use this app.
  #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
  #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;

  location = /.well-known/carddav {
    return 301 $scheme://$host/remote.php/dav;
  }
  location = /.well-known/caldav {
    return 301 $scheme://$host/remote.php/dav;
  }

  ## set max upload size
  client_max_body_size {{.Env.OWNCLOUD_MAX_UPLOAD}};
  fastcgi_buffers 8 4K;                       ## Please see note 1
  # fastcgi_ignore_headers X-Accel-Buffering; ## Please see note 2

  ## Uncomment if your server is build with the ngx_pagespeed module
  ## This module is currently not supported.
  #pagespeed off;

  error_page 403 /core/templates/403.php;
  error_page 404 /core/templates/404.php;

  location / {
    rewrite ^ /index.php$uri;
  }

  location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
    return 404;
  }
  location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
    return 404;
  }

  ## debug mode: authorize any url to be called:
  # location ~ ^/\.php(?:$|/) {
  ## Prod mode: authorize only specific urls:
  location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/) {
    fastcgi_split_path_info ^(.+\.php)(/.*)$;
    include fastcgi_params;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param SCRIPT_NAME $fastcgi_script_name; # necessary for owncloud to detect the contextroot https://github.com/owncloud/core/blob/v10.0.0/lib/private/AppFramework/Http/Request.php#L603
    fastcgi_param PATH_INFO $fastcgi_path_info;
    ## enable for HTTPS only:
    #fastcgi_param HTTPS on;
    fastcgi_param modHeadersAvailable true; ## Avoid sending the security headers twice
    fastcgi_param front_controller_active true;
    fastcgi_read_timeout 180; ## increase default timeout e.g. for long running carddav/ caldav syncs with 1000+ entries
    fastcgi_pass php-handler;
    fastcgi_intercept_errors on;
    fastcgi_request_buffering off; ## Available since NGINX 1.7.11
  }

  location ~ ^/(?:updater|ocs-provider)(?:$|/) {
    try_files $uri $uri/ =404;
    index index.php;
  }

  ## Adding the cache control header for js and css files
  ## Make sure it is BELOW the PHP block
  location ~ \.(?:css|js)$ {
    try_files $uri /index.php$uri$is_args$args;
    add_header Cache-Control "max-age=15778463";
    ## Add headers to serve security related headers (It is intended to have those duplicated to the ones above)
    ## Before enabling Strict-Transport-Security headers please read into this topic first.
    #add_header Strict-Transport-Security "max-age=15552000; includeSubDomains";
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Robots-Tag none;
    add_header X-Download-Options noopen;
    add_header X-Permitted-Cross-Domain-Policies none;
    access_log off; ## Optional: Don't log access to assets
  }

  location ~ \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg|map|json)$ {
    add_header Cache-Control "public, max-age=7200";
    try_files $uri /index.php$uri$is_args$args;
    access_log off; ## Optional: Don't log access to other assets
  }

  ## Various administrative and debug scripts placed under /var/www/html
  ## Needless to say it is recomended to enable the rewrite line in Production
  ## vi /etc/nginx/sites-available/default; ngrestart && nglogs
  location ~ ^/(?:apcu|environ|op-ocp|phpinfo)\.php(?:$|/) {
    {{.Env.NGINX_ENABLED_TEST_URL}}  ## uncomment in Production with NGINX_ENABLE_TEST_URL=false
    root  {{.Env.NGINX_ROOT_TEST_URL}};
    fastcgi_split_path_info ^(.+\.php)(/.*)$;
    include fastcgi_params;
    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    fastcgi_param SCRIPT_NAME $fastcgi_script_name; ## necessary for owncloud to detect the contextroot https://github.com/owncloud/core/blob/v10.0.0/lib/private/AppFramework/Http/Request.php#L603
    fastcgi_param PATH_INFO $fastcgi_path_info;
    fastcgi_pass php-handler;
  }

}
